import CoolProp.CoolProp as CP
from parameters import Mass_Parameters

class Turbine:

    def __init__(self, mass_estimator: Mass_Parameters, isentropic_efficiency=0.85,
                 air_mass_flow_kg_s=1, temperature_in_K=293.15, pressure_in_Pa=1.013e5, pressure_out_Pa=1.013e5, temperature_out_K=293.15,
                 nominal_BoP_pressure_drop_Pa=0.15*1e5, nominal_air_flow_kg_s=0.130):

        self.isentropic_efficiency = isentropic_efficiency
        self.air_mass_flow_kg_s = air_mass_flow_kg_s
        self.pressure_in_Pa = pressure_in_Pa
        self.temperature_in_K = temperature_in_K
        self.pressure_out_Pa = pressure_out_Pa
        self.temperature_out_K = temperature_out_K
        self.nominal_pressure_drop_Pa = nominal_BoP_pressure_drop_Pa
        self.nominal_air_flow_kg_s = nominal_air_flow_kg_s

        # Ensure the component is available in masses_FCM_depended; raise error if missing
        if 'Turbine' not in mass_estimator.masses_FCM_depended:
            raise ValueError("Component 'Turbine' not found in mass estimator's dependent masses.")

        # Retrieve mass data from the mass_estimator instance
        self.mass_by_power_kg_kW = mass_estimator.masses_FCM_depended['Turbine']

    def calculate_power(self)->float:
        """
        Calculate the mechanical power generated by the turbine.

        Returns:
        - turbine_power_W: The mechanical power generated by the turbine in Watts.
        """

        # Calculate the specific enthalpy before and after the turbine
        specific_enthalpy_in_J_kg = CP.PropsSI('H', 'T', self.temperature_in_K, 'P', self.pressure_in_Pa, 'Air')
        specific_enthalpy_out_J_kg = CP.PropsSI('H', 'T', self.temperature_out_K, 'P', self.pressure_out_Pa, 'Air')

        # Compute the isentropic power
        turbine_isentopic_power_W = self.air_mass_flow_kg_s * (specific_enthalpy_in_J_kg - specific_enthalpy_out_J_kg)

        # Multiply by the flow rate to get the total power output
        turbine_shaft_power_W = turbine_isentopic_power_W * self.isentropic_efficiency

        return turbine_shaft_power_W
    
    def calculate_BoP_pressure_drop(self)->float:
        """
        Calculate the pressure drop across the BoP components upstream the turbine for a given air mass flow rate.
        The "model" is a simple quadratic relationship between pressure drop and air mass flow rate.

        :param air_flow_kg_s: Air mass flow rate in [kg/s]
        :return: Pressure drop across the BoP components (cathode out -> turbine in) in [Pa]
        """

        pressure_drop_coefficient = self.nominal_pressure_drop_Pa / (self.nominal_air_flow_kg_s**2)
        pressure_drop_Pa = pressure_drop_coefficient * self.air_mass_flow_kg_s**2

        return pressure_drop_Pa
    
    def calculate_mass(self)->dict:
        """
        Calculate predicted mass of the tubine utilizing the mass_by_power_kg_kW dict of the class.
        
        Returns:
        - result: A dictionary containing:
            - "mean": Turbine mass in kg based on the mean value of mass_by_power_kg_kW.
            - "sd": Turbine mass in kg based on the standard deviation of mass_by_power_kg_kW.


        """
        turbine_el_power_W = self.calculate_power()
        turbine_mass_mean_kg = self.mass_by_power_kg_kW["mean"] * turbine_el_power_W / 1000
        turbine_mass_sd_kg = self.mass_by_power_kg_kW["sd"] * turbine_el_power_W / 1000
        return {
        "mean": turbine_mass_mean_kg,
        "sd": turbine_mass_sd_kg
        }
    
    def calculate_T_out(self) -> float:
        """
        Calculate the outlet Temperature of the isentropic relaxation by the turbine

        Returns:
        - temperature_out_K: T in K at the turbine outlet

        """
        # Compute the specific heat ratio of air
        specific_heat_ratio = CP.PropsSI('C', 'T', self.temperature_in_K, 'P', self.pressure_in_Pa, 'Air') / \
            CP.PropsSI('O', 'T', self.temperature_in_K, 'P', self.pressure_in_Pa, 'Air')
        
        temperature_out_K = self.temperature_in_K * (((self.pressure_out_Pa/self.pressure_in_Pa)**((specific_heat_ratio-1)/specific_heat_ratio)-1)/(self.isentropic_efficiency) + 1)
        #self.temperature_out_K = temperature_out_K
        
        return temperature_out_K
    
# %% Example usage:

mass_estimator = Mass_Parameters()

C1 = Turbine(mass_estimator, isentropic_efficiency=0.85, air_mass_flow_kg_s=1,
             temperature_in_K=350.15, pressure_in_Pa=2e5, pressure_out_Pa=1e5, temperature_out_K=293.15)
           
power_el = C1.calculate_power()
mass = C1.calculate_mass()