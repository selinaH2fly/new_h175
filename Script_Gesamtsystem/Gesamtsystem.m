%% Matlab script for the fuel cell system (Anode, Cathode, Stack and Thermal) as a stationary calculating tool. 
%
%% Click Run, enter the input in the dialog box and press "OK"

%
%
clear
clc

% Run the initialization file to get the constants and system parameters
run('Initialization.m');

%=============================================
% Prompt the user for input using input dialog
%=============================================
prompt = {'Required current from stack (A): ', 'Outlet pressure of the H2 tank (bar):', 'outlet temperature of the tank (degree celcius): '};
dlgtitle = 'Enter Parameters';
dims = [1 45];
definput = {'0', '0', '0'}; % Default input values
user_input = inputdlg(prompt, dlgtitle, dims, definput);

% Get user inputs
I = str2double(user_input{1});
p_H2_0 = str2double(user_input{2});
T_0 = str2double(user_input{3});

%=============================
% Cathode Calculation
%=============================

Lambda_C_0 = interp1(I_stoic, stoic_cathode, I, 'linear');
n_dot_O2 = (n_cell * I * Lambda_C_0) / (4 * F);
n_dot_O2_stoic = (n_cell * I) / (4 * F);
 
V_dot_O2 = (M_Oxygen / rho_O2_std) * n_dot_O2 * 60000;
V_dot_Air = V_dot_O2 / c_O2_0;
rho_Air = rho_air_std/1000;     % convert to kg/l
 
m_dot_Air_stoic = (V_dot_Air * rho_Air) *(1000/60); % convert kg/min to g/s
m_dot_Air = cmpr_flow(m_dot_Air_stoic, 37.4);   %g/s
n_dot_Air = n_dot_O2 / c_O2_0;

% pressure drop: intercooler, humidifer, stack, barg
p_PT6510 = 0.00002312818*m_dot_Air^2+0.004737747*m_dot_Air + p_std;
 
% pressure drop: stack, barg
p_PT6512 = 0.00002126641*m_dot_Air^2+0.004012371*m_dot_Air + p_std;
 
% Compressor

% Calculate the pressure ratio across the compressor
Delta_P_Cmpr = p_PT6510 / p_std;    %outlet_pressure / inlet_pressure;

% Calculate humidity ratio

% Convert pressure from bar to kPa
P_kPa = p_std * 100; % Convert from bar to kPa

% Convert temperature from  Kelvin to Celsius 
Tc = T_env - 273.15; % Convert from Celsius to Kelvin

% Calculate saturation vapor pressure (P_sat) in kPa using Tetens formula
P_sat = P_sat_const * exp((17.27 * Tc) / (Tc + 237.3));

% Calculate vapor pressure (P_v) in kPa
P_v = RH_0 * P_sat;

% Calculate humidity ratio (W) in kg/kg
omega = 0.62198 * (P_v / (P_kPa - P_v));

% Display the result
% fprintf('Humidity ratio for air at %.2f bar, %.2fÂ°C, and %.2f%% RH: %.8f kg/kg\n', p_std, Tc, RH_0 * 100, W);

%Calculation isentropic temperature

T_1_isen = T_env * (( p_PT6510 / p_std )^((isentropic_coefficient_Air -1)/isentropic_coefficient_Air));

%Calculation enthalpy

enthalpy1 = air_enthalpy(T_1_isen, omega, p_PT6510);    %J/kg
enthalpy2 = air_enthalpy(T_env, omega, p_std);          %J/kg
delta_enthalpy_isen = enthalpy1 -enthalpy2;             %J/kg
delta_enthalpy = delta_enthalpy_isen/eta_Compressor;     %J/kg

% Calculate the work done by the compressor
Work_Cmpr = (m_dot_Air/1000) * delta_enthalpy;
Pwr_Cmpr = Work_Cmpr/ (eta_Motor * eta_PE);

% Calculate the change in enthalpy
delta_h = (R_Air * 1000 * (p_PT6510 - p_std)) / (eta_Compressor - 1); % Enthalpy change in kJ/kg

% Calculate the heat generated
Delta_T = T_1 - T_1_isen;
cp_Air1 = cp_air(T_1);
Q_AirCompr = (m_dot_Air/1000) * cp_Air1 * Delta_T;
%Q_Cmpr = (1- (eta_Motor * eta_PE)) * Pwr_Cmpr + Q_AirCompr;  %W
Q_Cmpr = Work_Cmpr * (1-eta_Compressor);

% Display the result
% fprintf('Power required by the compressor: %.4f kW\n', Pwr_Cmpr / 1000);
% fprintf('Heat generated by the compressor: %.4f kW\n', Q_Cmpr / 1000);


% Intercooler
T_TT6511 = IntercoolerTemp(T_1, T_max);
Delta_T_Intercooler = T_1 - T_TT6511;
Q_Intercooler = (m_dot_Air/1000) * cp_Air * Delta_T_Intercooler;

%Inverter and Motor
Q_Inverter = Work_Cmpr * (1-eta_PE);
Q_Motor = Work_Cmpr * (1-eta_Motor);


% Exhaust

m_dot_exhaust_out_dry = m_dot_Air - ( (n_dot_O2_stoic * M_Oxygen) * 1000 );


%=============================
% Anode Calculation
%=============================

% Calculation for ASV VL6110

T_H2_0 = T_0 +273;	
p_PT6114 = p_PT6512 + 0.2; %bar


[V_dot_ASV, m_dot_ASV, m_dot_H2_ASV] =  Valveflow(p_H2_0,T_H2_0,c_H2_0,Kv_ASV,p_PT6114,p_std,T_std,rho_H2_std,0);



% Calculation for Purge Valve APV VL6135

[V_dot_Purge, m_dot_APV, m_dot_H2_APV] =  Valveflow(p_PT6114,353,1,Kv_APV,p_std,p_std,T_std,rho_H2_std,rho_N2_std);

m_dot_Purge = m_dot_APV * valve_opening_Purge ;

m_dot_H2_Purge = m_dot_H2_APV * valve_opening_Purge ;


% Calculation for Drain Valve ADV VL6134

[V_dot_Drain, m_dot_ADV, m_dot_H2_ADV] =  Valveflow(p_PT6114,300,1,Kv_ADV,1,p_std,T_H2_0,rho_H2_std,rho_N2_std);

m_dot_Drain = m_dot_ADV * valve_opening_Drain ;

    

% H2-mass flow

m_dot_H2_Stoich = M_Hydrogen * ((n_cell * I) / (2 * F)) * 1000;

m_dot_H2_0 = I*Lambda_C_0*V_dot_H2_const.*n_cell/(c_H2_0/100*1000)/1000*60*rho_H2_std*10/3600;
m_dot_H2_1 = I*Lambda_A_1*V_dot_H2_const.*n_cell/(c_H2_0/100*1000)/1000*60*rho_H2_std*10/3600;
m_dot_H2_2 = m_dot_H2_1-m_dot_H2_Stoich;

Q_N_H2_0 = m_dot_H2_0/rho_H2_std/1000*3600;

m_dot_H2 = m_dot_H2_Stoich + m_dot_H2_Purge;

lambda_A = m_dot_H2 / m_dot_H2_Stoich;

m_dot_H2_11 = I*lambda_A*V_dot_H2_const.*n_cell/(c_H2_0/100*1000)/1000*60*rho_H2_std*10/3600;

% Calculation for APRV VL6112

[V_dot_APRV, m_dot_APRV, m_dot_H2_APRV] =  Valveflow(p_H2_0,T_H2_0,c_H2_0,Kv_APRV,p_PT6114,p_std,T_std,rho_H2_std,0);

% Calculation of required Kv

Kv_APRV_min = kv_prv_min(m_dot_H2,rho_H2_std,T_H2_0,p_H2_0,p_PT6114);
 
Opening_APRV1 = (Kv_APRV_min/Kv_APRV)*100;
Opening_APRV = find_max_opening(Opening_APRV1, 100);

% % Pressure drop in ASV"
% 	p_H2_SOV=p_H2_0-DELTA_p_H2_calc_SOV
% 	0=(DELTA_p_H2_calc_SOV*convert(kPa; kg/(m*s^2)))^2 - p_H2_0*...
%  convert(kPa; kg/(m*s^2))* DELTA_p_H2_calc_SOV*convert(kPa; kg/(m*s^2))...
% +(Q_N_H2_0/(514*Kv_SOV))^2*10^10*density(Hydrogen;T=T_N;P=P_N)*converttemp(C; K; T_H2_0)
% 
%   % Pressure drop in ASV"
% 
%   p_H2_PRV=p_H2_SOV-DELTA_p_H2_calc_PRV
% 	0=(DELTA_p_H2_calc_PRV*convert(kPa; kg/(m*s^2)))^2 - p_H2_SOV...
% *convert(kPa; kg/(m*s^2))* DELTA_p_H2_calc_PRV*convert(kPa; kg/(m*s^2))...
% +(Q_N_H2_0/(514*Kvs_PRV))^2*10^10*density(Hydrogen;T=T_N;P=P_N)*converttemp(C; K; T_H2_0)

% %% Display the results
% fprintf('                   \n');
% fprintf('------------------\n');
% fprintf('Displaying Results\n');
% fprintf('------------------\n');
% fprintf('                   \n');
% fprintf('Required Hydrogen Mass Flow at stack for %d A Current: %.4f g/s\n', I, m_dot_H2_Stoich);
% fprintf('Hydrogen Mass Flow from tank: %.4f g/s\n', m_dot_H2);
% %fprintf('Percentage opening of APRV: %.4f\n', m_dot_H2);
% fprintf('Recirculated Mass Flow : %.4f g/s\n', m_dot_H2_2);
% fprintf('Total Mass Flow through Purge valve: %.4f g/s\n', m_dot_H2_Purge);



%=============================
% Stack Calculation
%=============================

U = interp1(I_stack, U_stack, I, 'linear');       % find out corresponding cell voltage
U_Stack = n_cell * U;                             % Stack voltage for
P_Stack = (I * U * n_cell)/1000;                  % Stack power, kW
Q_Stack = (I * 1.223 * n_cell) * (1-U/1.223);
m_dot_H2O_prod = (I * n_cell) / (2 * F) * M_Water * 1000;  %water produced in g/s

%=============================
% Cooling Calculation
%=============================

T_TT6812 = interp1(I_cool, T_inlet, I, 'linear');

%Q_Stack = (Density(EG,T=T_TT6812,C=c_Glycol) * V_dot_cooling * Cp(EG,T=T_TT6812,C=c_Glycol) * (T_TT6820 - T_TT6812);


%================================
% Display the results to the user
%================================
msg = sprintf(['Stack Voltage = %.2f V, \n\nStack Power = %.2f kW, \n\nRequired Hydrogen Mass Flow at stack = %.2f g/s,' ...
              '\n\nWater produced in stack = %.2f g/s,\n\nCathode Outlet Pressue = %.2f barg, \n\nAnode Outlet Pressue = %.2f barg,' ...
              '\n\nH2 massflow from tank = %.2f g/s, \n\nRequired Percentage Opening of APRV = %.2f, \n\nPurged massflow = %.2f g/s,' ...
              '\n\nRecirculated Mass Flow = %.4f g/s, \n\nAir massflow = %.2f g/s, \n\nExhaust Air(dry) massflow = %.2f g/s, ' ...
              '\n\nPower required by compressor = %.2f W, \n\nHeat loss in compressor = %.4f W, \n\nHeat loss in Motor/Inverter  = %.4f W (Each)'], ...
              U_Stack, P_Stack,m_dot_H2, m_dot_H2O_prod,p_PT6512,p_PT6114,m_dot_H2_0, Opening_APRV,m_dot_Purge,m_dot_H2_2,m_dot_Air,m_dot_exhaust_out_dry,Pwr_Cmpr,Q_Cmpr,Q_Motor);



msgbox(msg, 'Result');


%% Functions
%-------------

function [V_dot, m_dot, m_dot_H2] = Valveflow(p1,T1,C_H2,Kv,p2,p_std,T_std,...
                                              rho_H2_std,rho_N2_std)
dp = p1 - p2;   % Pressure difference
rho_std = rho_H2_std*C_H2 + rho_N2_std*(1-C_H2);    % density of gas mixture

% distinction of flow characteristics based on pressure drop
if p2/p1 > 0.5
    % low pressure drop - subsonic flow
    V_dot_std_cmph = Kv*514*sqrt(abs((p2*dp)/(T1*rho_std)));    % at standard conditions
  
else 
    % high pressure drop - sonic flow (independent of downstream pressure)
    V_dot_std_cmph = Kv*257*p1*sqrt(1/(T1*rho_std));            % at standard conditions
end

V_dot_cmph = V_dot_std_cmph*(p_std/p1)*(T1/T_std);       % volumetric flow rate [m^3/h] at operating conditions
m_dot = V_dot_std_cmph*rho_std;             % purged mass flow rate [kg/h]
m_dot_H2 = V_dot_std_cmph*rho_H2_std*C_H2;  % purged hydrogenmass flow rate [kg/h]


% unit conversions
cmph_to_lpm = 1000/60;
V_dot = V_dot_cmph * cmph_to_lpm;   % volumetric flow rate [LPM]
kgph_to_gps = 1000/3600;
m_dot = m_dot*kgph_to_gps;          % purged mass flow rate [g/s]
m_dot_H2 = m_dot_H2*kgph_to_gps;    % purged hydrogen mass flow rate [g/s]
end



function Kv_H2 =  kv_prv_min(m_dot,rho_H2_std,T,p1,p2)
 
V_dot_N = (m_dot * 3600/1000) / rho_H2_std;
 
dp = p1 - p2;   % Pressure difference
if(p2 >= (p1 / 2)) 
    Kv_H2 = (V_dot_N / 514) * sqrt((T * rho_H2_std) / (p2 * dp));
else
     Kv_H2 = (V_dot_N / (257*p1)) * sqrt(T * rho_H2_std);
end
end

function intercooler_T =  IntercoolerTemp(T, T_limit)
 
if (T > T_limit) 
    intercooler_T = T_limit;
else
    intercooler_T = T;
end
end

function compressor_flow = cmpr_flow(flow, flow_min)
if (flow > flow_min) 
    compressor_flow = flow;
else
    compressor_flow = flow_min;
end
end
 
function h = air_enthalpy(T, omega, P)
% Constants
%R_air = 287; % Specific gas constant for air in J/kg*K
h_fg = 2501000; % Specific enthalpy of vaporization for water at 0Â°C in J/kg
% convert Pressure bar to Pa
P1 = P*10^5; % Initial pressure in Pa
% Specific heat capacity of dry air (J/kg*K)
cp_dry = 1005 + 0.00192 * T;

% Enthalpy of dry air (J/kg)
h_dry = cp_dry * T;

% Enthalpy of moisture (J/kg)
h_moisture = omega * h_fg;

% Total enthalpy of air (J/kg)
h = h_dry + h_moisture;
end

function cp = cp_air(T)
cp = 1005 + 0.00192 * T;
end

function max_value = find_max_opening(a, b)
    % Check if a is greater than or equal to b
    if a >= b
        max_value = b; % If true, return a
    else
        max_value = a; % If false, return b
    end
end
